pipeline {
    agent any

    environment {
        NEXUS_URL = 'http://3.110.77.23:8081'
        DOCKER_IMAGE = 'react-app'
        NEXUS_DOCKER_REGISTRY = "${NEXUS_URL}/repository/docker-hosted"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')  // Add Docker Hub credentials in Jenkins
        DOCKER_REPO = "your-dockerhub-username/react-app"  // Replace with your Docker Hub username
        VERSION = "1.0.${BUILD_NUMBER}"
    }

    parameters {
        booleanParam(name: 'PROD_BUILD', defaultValue: true, description: 'Enable this as a production build')
    }

    stages {
        stage('Source') {
            steps {
                git branch: 'main', 
                    changelog: false, 
                    credentialsId: 'github', 
                    poll: false, 
                    url: 'https://github.com/thejungwon/docker-reactjs.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build and SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            sonar-scanner \
                            -Dsonar.projectKey=react-app \
                            -Dsonar.sources=src \
                            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                            -Dsonar.host.url=${NEXUS_URL}:9000
                        """
                    }
                }
            }
        }

        stage('Test') {
            parallel {
                stage('Unit Test') {
                    steps {
                        sh 'npm test -- --watchAll=false --coverage'
                    }
                }
                stage('Integration Test') {
                    steps {
                        echo 'Running integration tests'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image with multiple tags
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${VERSION} \
                        -t ${DOCKER_REPO}:${VERSION} \
                        -t ${DOCKER_REPO}:latest \
                        --build-arg BUILD_VERSION=${VERSION} .
                    """
                }
            }
        }

        stage('Publish to Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', 
                                                    usernameVariable: 'NEXUS_USER', 
                                                    passwordVariable: 'NEXUS_PASS')]) {
                        // Tag and push to Nexus
                        sh """
                            docker tag ${DOCKER_IMAGE}:${VERSION} ${NEXUS_DOCKER_REGISTRY}/${DOCKER_IMAGE}:${VERSION}
                            docker login -u ${NEXUS_USER} -p ${NEXUS_PASS} ${NEXUS_DOCKER_REGISTRY}
                            docker push ${NEXUS_DOCKER_REGISTRY}/${DOCKER_IMAGE}:${VERSION}
                        """
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    
                    // Push both version-tagged and latest images
                    sh """
                        docker push ${DOCKER_REPO}:${VERSION}
                        docker push ${DOCKER_REPO}:latest
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            when {
                expression { return params.PROD_BUILD }
            }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'pk_jv_app', 
                                                 keyFileVariable: 'SSHKEY', 
                                                 usernameVariable: 'USER')]) {
                    sh '''
                        # Copy docker-compose file to EC2
                        rsync -avzP -e "ssh -o StrictHostKeyChecking=no -i $SSHKEY" \
                        docker-compose.yml ${USER}@13.201.85.177:/home/deploy/react-app/

                        # Update and restart containers
                        ssh -o StrictHostKeyChecking=no -i $SSHKEY ${USER}@13.201.85.177 \
                        "cd /home/deploy/react-app && \
                        docker-compose down && \
                        docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW && \
                        docker-compose pull && \
                        docker-compose up -d"
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                // Cleanup Docker images to prevent disk space issues
                sh """
                    docker rmi ${DOCKER_IMAGE}:${VERSION} || true
                    docker rmi ${DOCKER_REPO}:${VERSION} || true
                    docker rmi ${DOCKER_REPO}:latest || true
                    docker rmi ${NEXUS_DOCKER_REGISTRY}/${DOCKER_IMAGE}:${VERSION} || true
                """
                // Logout from Docker registries
                sh """
                    docker logout ${NEXUS_DOCKER_REGISTRY}
                    docker logout
                """
            }
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}